// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  channel   String
  role      String   @default("USER")

  tokens   Token[]
  sessions Session[]

  categories       CustomCategory[]
  sharedCategories UsersOnCustomCategories[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

model OfficialCategory {
  id          Int            @id @default(autoincrement())
  words       OfficialWord[]
  name        String
  description String
  available   Boolean        @default(false)
  difficulty  Int            @default(1)
}

model OfficialWord {
  id         Int              @id @default(autoincrement())
  categoryId Int
  category   OfficialCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  word       String
  hint       String

  @@unique([categoryId, word])
}

enum CustomCategoryVisibility {
  PUBLIC
  PRIVATE
}

model CustomCategory {
  id          Int                       @id @default(autoincrement())
  words       CustomWord[]
  name        String
  description String
  difficulty  Int
  visibility  CustomCategoryVisibility  @default(PRIVATE)
  ownerId     String
  owner       User                      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  sharedUsers UsersOnCustomCategories[]
}

model UsersOnCustomCategories {
  category   CustomCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  user       User           @relation(fields: [userId], references: [id])
  userId     String

  @@id([categoryId, userId])
}

model CustomWord {
  id         Int            @id @default(autoincrement())
  categoryId Int
  category   CustomCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  word       String
  hint       String

  @@unique([categoryId, word])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
